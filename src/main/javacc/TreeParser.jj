options {
	LOOKAHEAD = 2;
	STATIC = false;
    JDK_VERSION = "1.5";
}



PARSER_BEGIN(TreeParser)
package de.up.ling.tree;

import java.util.*;
import java.io.*;

public class TreeParser {
	
    public static Tree<String> parse(String string) {
        try {
            TreeParser p = new TreeParser(new StringReader(string));
            return p.tree();
        } catch(ParseException e) {
            System.err.println("Exception while parsing " + string + ": " + e);
            return null;
        }
    }
}
PARSER_END(TreeParser)




SKIP : { " " | "\r" | "\t" | "\n" }

TOKEN : {
   <ATOM : ["a"-"z", "A"-"Z", "*", "+", "_", "@"] (["a"-"z", "A"-"Z", "_", "0"-"9", "-", "*", "+", "_", "@"])* >
|  <QUOTED_ATOM : ("\'" ((~["\'"])*) "\'")>
}



Tree<String> tree() :
{
	String label;
	List<Tree<String>> subterms = new ArrayList<Tree<String>>();
	Tree subtree;
}
{
	label = atom() "(" 
               (subtree = tree() { subterms.add(subtree); })
               ("," subtree = tree() { subterms.add(subtree); })*
        	 ")" {
		return Tree.create(label, subterms);
	}
	
        | label = atom() {
	    return Tree.create(label, new Tree[0]);
         }
}

String atom() :
{
    Token label;
}
{
    label = <ATOM> { return label.image;}
    | label = <QUOTED_ATOM> { return label.image.substring(1, label.image.length()-1); }
}